#include<bits/stdc++.h>

using namespace std;

int dp[1000][1000];
int tr[1000][1000];

int subset(int arr[], int sum, int n){
    if(sum == 0)
        return 1;

    if(n <= 0)
        return 0;

    if(dp[n][sum] != -1)
        return dp[n][sum];

    if(arr[n] <= sum){
        int l1 = subset(arr, sum - arr[n], n - 1);
        int l2 = subset(arr, sum, n - 1);

        if(l1 > l2){
            tr[n][sum] = 1;
            return dp[n][sum] = l1;
        }
        else{
            tr[n][sum] = 0;
            return dp[n][sum] = l2;
        }
    }
    else{
        tr[n][sum] = 0;
        return dp[n][sum] = subset(arr, sum, n - 1);
    }
}

void traceback(int arr[], int sum, int n){
    if(n <= 0 || sum == 0)
        return;

    if(tr[n][sum] == 1){
        cout << arr[n] << " ";
        traceback(arr, sum - arr[n], n - 1);
    }
    else if(tr[n][sum] == 0)
        traceback(arr, sum, n - 1);
}

int main(){
    int n, sum;
    cout << "Enter the number of product: ";
    cin >> n;

    int arr[100];
    cout << "Enter array: ";
    for(int i = 1; i <= n; i++)
        cin >> arr[i];

    cout << "Enter the sum: ";
    cin >> sum;

    memset(dp, -1, sizeof(dp));

    if(subset(arr, sum, n)){
        cout << "Possible" << endl;
        traceback(arr, sum, n);
    }
    else
        cout << "Not Possible" << endl;
}